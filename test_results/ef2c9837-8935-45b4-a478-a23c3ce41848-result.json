{"name": "test_buy_product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "@allure.description(\"Test buy product\")\n    def test_buy_product():\n        options = webdriver.ChromeOptions()\n        options.add_experimental_option(\"detach\", True)\n        # options.add_argument(\"--headless\")\n        driver = webdriver.Chrome(options=options)\n    \n        print(\"Start Test\")\n    \n        main = MainPage(driver)\n        main.authorization()\n        main.open_product_page()\n    \n        prod = ProductPage(driver)\n>       prod.select_product()\n\ntests/test_buy_product.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/product_page.py:101: in select_product\n    self.click_add_to_cart_button()\npages/product_page.py:69: in click_add_to_cart_button\n    self.get_add_to_cart_button().click()\npages/product_page.py:42: in get_add_to_cart_button\n    return WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4a16cad3e3a779a1112068dab2846b95\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f5b6d8b9090>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../.local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "description": "Test buy product", "steps": [{"name": "Authorization", "status": "passed", "start": 1713039775836, "stop": 1713039783228}, {"name": "Open product page", "status": "passed", "start": 1713039783228, "stop": 1713039785951}, {"name": "Select product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"/home/anton/myProjects/zlatoz_selenium/pages/product_page.py\", line 101, in select_product\n    self.click_add_to_cart_button()\n  File \"/home/anton/myProjects/zlatoz_selenium/pages/product_page.py\", line 69, in click_add_to_cart_button\n    self.get_add_to_cart_button().click()\n  File \"/home/anton/myProjects/zlatoz_selenium/pages/product_page.py\", line 42, in get_add_to_cart_button\n    return WebDriverWait(self.driver, 10).until(\n  File \"/home/anton/.local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1713039785951, "stop": 1713039797600}], "attachments": [{"name": "stdout", "source": "d7c060e3-bc48-4e6c-8b0b-8ab44ce91b3c-attachment.txt", "type": "text/plain"}], "start": 1713039774712, "stop": 1713039797607, "uuid": "353244ad-928b-433c-9a0f-0d29bba63397", "historyId": "22557127bd8e5c9d27d61f44787213b8", "testCaseId": "22557127bd8e5c9d27d61f44787213b8", "fullName": "tests.test_buy_product#test_buy_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_buy_product"}, {"name": "host", "value": "MyPC"}, {"name": "thread", "value": "14253-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_buy_product"}]}