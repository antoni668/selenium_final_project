{"name": "test_buy_product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"wrap_icon inner-table-block top_basket\">...</div> is not clickable at point (1586, 26). Other element would receive the click: <path data-name=\"Ellipse 2 copy 9\" class=\"cls-1\" d=\"M956.047,952.005l-0.939,1.009-11.394-.008-0.952-1-0.953-6h-2.857a0.862,0.862,0,0,1-.952-1,1.025,1.025,0,0,1,1.164-1h2.327c0.3,0,.6.006,0.6,0.006a1.208,1.208,0,0,1,1.336.918L943.817,947h12.23L957,948v1Zm-11.916-3,0.349,2h10.007l0.593-2Zm1.863,5a3,3,0,1,1-3,3A3,3,0,0,1,945.994,954.005ZM946,958a1,1,0,1,0-1-1A1,1,0,0,0,946,958Zm7.011-4a3,3,0,1,1-3,3A3,3,0,0,1,953.011,954.005ZM953,958a1,1,0,1,0-1-1A1,1,0,0,0,953,958Z\" transform=\"translate(-938 -944)\"></path>\n  (Session info: chrome=123.0.6312.107)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6D69B7032+63090]\n\t(No symbol) [0x00007FF6D6922C82]\n\t(No symbol) [0x00007FF6D67BEC65]\n\t(No symbol) [0x00007FF6D680BB34]\n\t(No symbol) [0x00007FF6D6809954]\n\t(No symbol) [0x00007FF6D6807164]\n\t(No symbol) [0x00007FF6D6805EF9]\n\t(No symbol) [0x00007FF6D67FA708]\n\t(No symbol) [0x00007FF6D6826FDA]\n\t(No symbol) [0x00007FF6D67FA00A]\n\t(No symbol) [0x00007FF6D68271F0]\n\t(No symbol) [0x00007FF6D6843412]\n\t(No symbol) [0x00007FF6D6826D83]\n\t(No symbol) [0x00007FF6D67F83A8]\n\t(No symbol) [0x00007FF6D67F9441]\n\tGetHandleVerifier [0x00007FF6D6DB25AD+4238317]\n\tGetHandleVerifier [0x00007FF6D6DEF70D+4488525]\n\tGetHandleVerifier [0x00007FF6D6DE79EF+4456495]\n\tGetHandleVerifier [0x00007FF6D6A90576+953270]\n\t(No symbol) [0x00007FF6D692E54F]\n\t(No symbol) [0x00007FF6D6929224]\n\t(No symbol) [0x00007FF6D692935B]\n\t(No symbol) [0x00007FF6D6919B94]\n\tBaseThreadInitThunk [0x00007FFFE2AE7344+20]\n\tRtlUserThreadStart [0x00007FFFE3EA26B1+33]", "trace": "@allure.description(\"Test buy product\")\n    def test_buy_product():\n        options = webdriver.ChromeOptions()\n        options.add_experimental_option(\"detach\", True)\n        # options.add_argument(\"--headless\")\n        driver = webdriver.Chrome(options=options)\n    \n        print(\"Start Test\")\n    \n        main = MainPage(driver)\n        main.authorization()\n        main.open_product_page()\n    \n        prod = ProductPage(driver)\n>       prod.select_product()\n\ntests\\test_buy_product.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\product_page.py:77: in select_product\n    self.click_cart()\npages\\product_page.py:64: in click_cart\n    self.get_cart().click()\nC:\\Users\\anton\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\anton\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\anton\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002872A0C5850>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6D6919B94]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFE2AE7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFFE3EA26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"wrap_icon inner-table-block top_basket\">...</div> is not clickable at point (1586, 26). Other element would receive the click: <path data-name=\"Ellipse 2 copy 9\" class=\"cls-1\" d=\"M956.047,952.005l-0.939,1.009-11.394-.008-0.952-1-0.953-6h-2.857a0.862,0.862,0,0,1-.952-1,1.025,1.025,0,0,1,1.164-1h2.327c0.3,0,.6.006,0.6,0.006a1.208,1.208,0,0,1,1.336.918L943.817,947h12.23L957,948v1Zm-11.916-3,0.349,2h10.007l0.593-2Zm1.863,5a3,3,0,1,1-3,3A3,3,0,0,1,945.994,954.005ZM946,958a1,1,0,1,0-1-1A1,1,0,0,0,946,958Zm7.011-4a3,3,0,1,1-3,3A3,3,0,0,1,953.011,954.005ZM953,958a1,1,0,1,0-1-1A1,1,0,0,0,953,958Z\" transform=\"translate(-938 -944)\"></path>\nE         (Session info: chrome=123.0.6312.107)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6D69B7032+63090]\nE       \t(No symbol) [0x00007FF6D6922C82]\nE       \t(No symbol) [0x00007FF6D67BEC65]\nE       \t(No symbol) [0x00007FF6D680BB34]\nE       \t(No symbol) [0x00007FF6D6809954]\nE       \t(No symbol) [0x00007FF6D6807164]\nE       \t(No symbol) [0x00007FF6D6805EF9]\nE       \t(No symbol) [0x00007FF6D67FA708]\nE       \t(No symbol) [0x00007FF6D6826FDA]\nE       \t(No symbol) [0x00007FF6D67FA00A]\nE       \t(No symbol) [0x00007FF6D68271F0]\nE       \t(No symbol) [0x00007FF6D6843412]\nE       \t(No symbol) [0x00007FF6D6826D83]\nE       \t(No symbol) [0x00007FF6D67F83A8]\nE       \t(No symbol) [0x00007FF6D67F9441]\nE       \tGetHandleVerifier [0x00007FF6D6DB25AD+4238317]\nE       \tGetHandleVerifier [0x00007FF6D6DEF70D+4488525]\nE       \tGetHandleVerifier [0x00007FF6D6DE79EF+4456495]\nE       \tGetHandleVerifier [0x00007FF6D6A90576+953270]\nE       \t(No symbol) [0x00007FF6D692E54F]\nE       \t(No symbol) [0x00007FF6D6929224]\nE       \t(No symbol) [0x00007FF6D692935B]\nE       \t(No symbol) [0x00007FF6D6919B94]\nE       \tBaseThreadInitThunk [0x00007FFFE2AE7344+20]\nE       \tRtlUserThreadStart [0x00007FFFE3EA26B1+33]\n\nC:\\Users\\anton\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Test buy product", "steps": [{"name": "Authorization", "status": "passed", "start": 1713031668999, "stop": 1713031675419}, {"name": "Open product page", "status": "passed", "start": 1713031675419, "stop": 1713031678153}, {"name": "Select product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"wrap_icon inner-table-block top_basket\">...</div> is not clickable at point (1586, 26). Other element would receive the click: <path data-name=\"Ellipse 2 copy 9\" class=\"cls-1\" d=\"M956.047,952.005l-0.939,1.009-11.394-.008-0.952-1-0.953-6h-2.857a0.862,0.862,0,0,1-.952-1,1.025,1.025,0,0,1,1.164-1h2.327c0.3,0,.6.006,0.6,0.006a1.208,1.208,0,0,1,1.336.918L943.817,947h12.23L957,948v1Zm-11.916-3,0.349,2h10.007l0.593-2Zm1.863,5a3,3,0,1,1-3,3A3,3,0,0,1,945.994,954.005ZM946,958a1,1,0,1,0-1-1A1,1,0,0,0,946,958Zm7.011-4a3,3,0,1,1-3,3A3,3,0,0,1,953.011,954.005ZM953,958a1,1,0,1,0-1-1A1,1,0,0,0,953,958Z\" transform=\"translate(-938 -944)\"></path>\n  (Session info: chrome=123.0.6312.107)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6D69B7032+63090]\n\t(No symbol) [0x00007FF6D6922C82]\n\t(No symbol) [0x00007FF6D67BEC65]\n\t(No symbol) [0x00007FF6D680BB34]\n\t(No symbol) [0x00007FF6D6809954]\n\t(No symbol) [0x00007FF6D6807164]\n\t(No symbol) [0x00007FF6D6805EF9]\n\t(No symbol) [0x00007FF6D67FA708]\n\t(No symbol) [0x00007FF6D6826FDA]\n\t(No symbol) [0x00007FF6D67FA00A]\n\t(No symbol) [0x00007FF6D68271F0]\n\t(No symbol) [0x00007FF6D6843412]\n\t(No symbol) [0x00007FF6D6826D83]\n\t(No symbol) [0x00007FF6D67F83A8]\n\t(No symbol) [0x00007FF6D67F9441]\n\tGetHandleVerifier [0x00007FF6D6DB25AD+4238317]\n\tGetHandleVerifier [0x00007FF6D6DEF70D+4488525]\n\tGetHandleVerifier [0x00007FF6D6DE79EF+4456495]\n\tGetHandleVerifier [0x00007FF6D6A90576+953270]\n\t(No symbol) [0x00007FF6D692E54F]\n\t(No symbol) [0x00007FF6D6929224]\n\t(No symbol) [0x00007FF6D692935B]\n\t(No symbol) [0x00007FF6D6919B94]\n\tBaseThreadInitThunk [0x00007FFFE2AE7344+20]\n\tRtlUserThreadStart [0x00007FFFE3EA26B1+33]\n\n", "trace": "  File \"C:\\#MyProjects\\zlatoz_selenium\\pages\\product_page.py\", line 77, in select_product\n    self.click_cart()\n  File \"C:\\#MyProjects\\zlatoz_selenium\\pages\\product_page.py\", line 64, in click_cart\n    self.get_cart().click()\n  File \"C:\\Users\\anton\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\anton\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\anton\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\anton\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1713031678153, "stop": 1713031681500}], "attachments": [{"name": "stdout", "source": "9294ead7-5721-46f9-8345-73f2c0004fd4-attachment.txt", "type": "text/plain"}], "start": 1713031667480, "stop": 1713031681502, "uuid": "8a229bc6-0fe5-48f2-a222-de0a33e28954", "historyId": "22557127bd8e5c9d27d61f44787213b8", "testCaseId": "22557127bd8e5c9d27d61f44787213b8", "fullName": "tests.test_buy_product#test_buy_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_buy_product"}, {"name": "host", "value": "DESKTOP-9VF3JS6"}, {"name": "thread", "value": "2632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_buy_product"}]}